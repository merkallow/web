@page "/"
@using MetaMask.Blazor
@using MetaMask.Blazor.Enums
@using System.IdentityModel.Tokens.Jwt
@using Newtonsoft.Json
@inject IDoProjects Comms
@inject IDoAddresses Addr
@inject IAuthenticate Auth
@inject IToastService Toast
@inject MetaMaskService Meta
@inject AppState AppState
@inject ClientConfig CFG
@inject IJSRuntime JS
@implements IDisposable


<PageTitle>Merkallow</PageTitle>

@*@if(AppState.AccountToShow().StartsWith("0x47b4"))*@
@*@if(true)
    {
    <button class="btn btn-secondary" @onclick="@(() => Test())">Test</button>
    }*@


@if (AppState.IsAuthenticated)
{
    <div style="margin-bottom: .5rem;">Welcome, <span style="color: #5a349aff; font-weight:bold;">@AppState.AccountToShow()</span></div>
}

@if (@Spinning)
{
    <Spinner />
}
@if (!AppState.IsAuthenticated)
{
    <div>
        <div class="d-flex justify-content-center">
            <h2>NFT mint whitelist</h2>
        </div>
        <div class="d-flex justify-content-center">
            <button class="btn btn-primary" @onclick="(() => ClickedAuthenticate())" disabled="@(!HasMetaMask)">
                Authenticate
            </button>
        </div>

        @if (!HasMetaMask)
        {
            <div class="d-flex justify-content-center vertical-space darktext">
                Please authenticate with <span>&nbsp;</span> <a href="https://metamask.io" target="_blank"> MetaMask </a>.
            </div>
        }
    </div>
}
else if (!ProperChain)
{
    <div>Please, select <span style="color: #5a349aff; font-weight:bold">@NeededChain</span> chain</div>
    <button class="btn btn-primary" @onclick="@(() => SwitchChain())">Open MetaMask</button>
}
else if (SelectedProject == null)
{
    @if (ShowCreateForm)
    {
        <div>
            <input type="text" @bind-value="@NewProjectName" placeholder="Project name" class="project-input">
            <button class="btn btn-primary" @onclick="CreateProject">Create</button>
        </div>
    }
    else
    {
        <div>
            <button class="btn btn-primary" @onclick="ShowProjectCreation"><span class="oi oi-plus" style="margin-right:.5rem; font-size: 14px;"></span>New Project</button>
        </div>
    }

    <div class="d-flex flex-sm-wrap" style="margin-top: .5rem; margin-bottom: .5rem;">
        @if (Projects != null)
        {
            foreach (var prj in Projects)
            {
                <div @onclick="@(() => SelectProject(prj))" class="project-card">
                    <ProjectComponent CurrentProject=prj />
                </div>
            }
        }
    </div>
}
else
{
    <div>
        <button class="btn btn-secondary" @onclick="BackToProjects"><span class="oi oi-arrow-circle-left" style="margin-right:.5rem; font-size: 14px;"></span>Back</button>
    </div>

    <h3 style="margin-top: 1rem;">
        @SelectedProject.Name
    </h3>

    @if (GeneratedRoot != null)
    {
        <div class="root-cid">
            <div><span style="margin-right: .5rem;">Root:</span> @GeneratedRoot.Root</div>
            <div><span style="margin-right: .8rem;">CID:</span> @GeneratedRoot.Cid</div>
        </div>
    }

    <div>
        <ControlAddressComponent GenerateEvt=@GenerateRoot
                             SelectedAddress=@SelectedAddress
                             AddEvent=@AddAddress
                             DeleteEvent=@DeleteAddress
                             UpdateEvent=@UpdateAddress
                             CannotGenerate=@HasNoAddresses />

        <BulkAddComponent AddEvent=@AddBulk />
    </div>

    <h4>Whitelist: @(Addresses?.Count ?? 0)</h4>

    @if (Addresses != null && Addresses.Count > 0)
    {
        @foreach (var addr in Addresses)
        {
            <div @onclick="(() => SelectAddress(addr))">
                <AddressComponent CurrentAddress=@addr Selected="@(addr == SelectedAddress)" />
            </div>
        }
    }
    else
    {
        <div>No addresses added at the moment.</div>
    }
}

@code {
    List<Project> Projects;
    Project SelectedProject;
    List<Address> Addresses;
    Address SelectedAddress;
    ProjectRoot GeneratedRoot;
    bool ShowCreateForm = false;
    string NewProjectName = string.Empty;
    bool HasNoAddresses => Addresses == null || Addresses.Count == 0;
    bool Spinning = false;
    void ShowProjectCreation() => ShowCreateForm = true;
    bool HasMetaMask = true;

    string NeededChain => NetworksList.Networks[CFG.NetworkId];
    bool ProperChain => AppState.ChainId == CFG.NetworkId;

    protected override async Task OnInitializedAsync()
    {
        HasMetaMask = await Meta.HasMetaMask();
        if (HasMetaMask)
            await Meta.ListenToEvents();

        Console.WriteLine("initializing");
        bool isSiteConnected = await Meta.IsSiteConnected();
        if (isSiteConnected)
        {
            Console.WriteLine("connected");
            await GetSelectedNetwork();
        }

        MetaMaskService.AccountChangedEvent += MetaMaskService_AccountChangedEvent;
        MetaMaskService.ChainChangedEvent += MetaMaskService_ChainChangedEvent;

        await CheckAndSetUser();
    }

    public async Task LoadProjects()
    {
        try
        {
            Projects = await Comms.Get();
        }
        catch (Exception ex)
        {
            Projects = new List<Project>();
            Toast.ShowError($"Error retrieving Projects: {ex.Message}");
        }
    }


    private async Task MetaMaskService_ChainChangedEvent((long, Chain) arg)
    {
        Console.WriteLine("MetaMaskService_ChainChangedEvent");
        Spinning = true;
        await GetSelectedNetwork();
        Spinning = false;
        StateHasChanged();
    }

    private async Task MetaMaskService_AccountChangedEvent(string arg)
    {
        Console.WriteLine("MetaMaskService_AccountChangedEvent");
        Spinning = true;
        await CheckAndSetUser();
        Spinning = false;
        StateHasChanged();
    }

    public async Task GetSelectedNetwork()
    {
        var chainInfo = await Meta.GetSelectedChain();

        AppState.SetChain(this, chainInfo.chainId);
        Console.WriteLine($"ChainID: {AppState.ChainId}");
        StateHasChanged();

        if (ProperChain)
        {
            Console.WriteLine($"Authenticated on: {NetworksList.Networks[AppState.ChainId]}");
        }
        else
        {
            Toast.ShowWarning($"Please, connect to chain: {NetworksList.Networks[CFG.NetworkId]}");
        }
    }

    async Task Authenticate()
    {
        Console.WriteLine("Authenticating...");
        Spinning = true;
        if (!await Meta.HasMetaMask())
        {
            Console.WriteLine("Has no MetaMask");
            HasMetaMask = false;
            StateHasChanged();
        }
        else
        {
            try
            {
                if (!await Meta.IsSiteConnected())
                    await Meta.ConnectMetaMask();
                var userId = await Meta.GetSelectedAddress();


                var address = await Meta.GetSelectedAddress();
                var data = await Auth.FindUser(address);

                User? user = null;
                if (data.Count() == 0)
                {
                    Console.WriteLine("creating");
                    user = await Auth.CreateUser(address);
                }
                else
                {
                    user = data.First();
                    Console.WriteLine($"using {user.PublicAddress}");
                }

                var newToken = await Auth.CallAuthenticate(user);
                await AppState.Login(this, user, newToken);

                await GetSelectedNetwork();
            }
            catch (Exception ex)
            {
                Toast.ShowError($"Auth failed. Please, check your wallet");
            }
        }
        Spinning = false;
    }

    async Task CheckAndSetUser()
    {
        var tokenCookie = await JS.InvokeAsync<string>("getCookie", "token");

        // Get user from cookie
        if (!string.IsNullOrEmpty(tokenCookie))
        {
            var token = tokenCookie.GetTokenFromJwt();

            var address = await Meta.GetSelectedAddress();
            var currentUser = await Auth.GetUser(address);

            if (token.Payload.PublicAddress == address) // same user
            {
                if (!AppState.IsAuthenticated)
                {
                    await AppState.Login(this, currentUser.First(), tokenCookie);
                }

                await LoadProjects();
            }
            else
            {
                await AppState.Logout(this);
            }
        }
        else
        {
            await AppState.Logout(this);
        }

        StateHasChanged();
    }


    async void CreateProject()
    {
        if (string.IsNullOrEmpty(NewProjectName))
        {
            Toast.ShowWarning("Please, specify project name!");
            return;
        }
        Spinning = true;
        var newProject = await Comms.Create(NewProjectName);
        Projects.Insert(0, newProject);
        ShowCreateForm = false;
        Spinning = false;
        StateHasChanged();
        NewProjectName = string.Empty;
    }

    async void SelectProject(Project p)
    {
        Spinning = true;
        SelectedProject = p;
        SelectedAddress = null;
        GeneratedRoot = null;
        ShowCreateForm = false;
        Addresses = await Addr.Get(p.Id);
        Spinning = false;
        StateHasChanged();
    }

    async void BackToProjects()
    {
        SelectedProject = null;
        Addresses = null;
        StateHasChanged();
    }

    async void SelectAddress(Address a)
    {
        Console.WriteLine($"Select address: {a.Id}");
        SelectedAddress = a;
        StateHasChanged();
    }

    async Task AddAddress(string publicAddress)
    {
        if (!Addresses.Any(o => o.PublicAddress == publicAddress))
        {
            Spinning = true;
            var added = await Addr.Add(publicAddress, SelectedProject.Id);
            SelectedAddress = null;
            Addresses.InsertRange(0, added);
            Spinning = false;
        }
        else
        {
            Toast.ShowWarning("This address already exists");
        }
    }

    async Task AddBulk(List<string> addressList)
    {
        Spinning = true;
        addressList = addressList.Distinct<string>().ToList();

        foreach (var publicAddress in addressList)
        {
            if (!Addresses.Any(o => o.PublicAddress == publicAddress))
            {
                var added = await Addr.Add(publicAddress, SelectedProject.Id);
                SelectedAddress = null;
                Addresses.InsertRange(0, added);
            }
        }

        Spinning = false;
    }

    bool IsSelected(Address addr)
    {
        return addr == SelectedAddress;
    }

    async Task GenerateRoot()
    {
        Spinning = true;
        Console.WriteLine($"call generate {SelectedProject.Id}");
        GeneratedRoot = await Comms.Generate(SelectedProject.Id);
        Spinning = false;
    }

    async Task DeleteAddress(Address address)
    {
        if (await Addr.Delete(address.Id))
        {
            Addresses.Remove(address);
            StateHasChanged();
        }
    }

    async Task UpdateAddress(Address address)
    {
        Console.WriteLine($"updating: {address.PublicAddress}");
        if(Addresses.Any(o => o.PublicAddress == address.PublicAddress))
        {
            throw new Exception("This address is already on the list");
        }

        if (await Addr.Update(address.PublicAddress, address.Id))
        {
            var i = Addresses.Select((o, i) => new { o, i }).Where(x => x.o.Id == address.Id).FirstOrDefault().i;
            Addresses[i] = address;
            Console.WriteLine("updated");
            StateHasChanged();
        }
    }

    async Task ClickedAuthenticate()
    {
        await Authenticate();
        await LoadProjects();
        StateHasChanged();
    }

    async Task SwitchChain()
    {
        var toChain = "0x" + CFG.NetworkId.ToString("X");
        await JS.InvokeVoidAsync("switchChain", toChain);
    }


    // ----
    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}